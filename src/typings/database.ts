import { If } from 'discord.js';
import { configKeys } from '../data/configData';
import { commandName } from './functions';

export type DefaultQueryResult = {
    fieldCount: number;
    affectedRows: number;
    insertId: number;
    serverStatus: number;
    warningCount: number;
    message: string;
    protocol41: boolean;
    changedRows: number;
};
export type QueryResult<T> = T extends DefaultQueryResult ? DefaultQueryResult : T[];

export enum modActionType {
    Mute = 'Réduction au silence',
    Unmute = 'Retrait de réduction au silence',
    Ban = 'Bannissement',
    Unban = 'Débannissement',
    Kick = 'Expulsion',
    Warn = 'Avertissement',
    Unwarn = "Retrait d'avertissement",
    EditLog = 'Modification de log',
    CoinsReset = 'Réinitialisation économique',
    CoinsAdd = 'Ajout économique',
    CoinsRemove = 'Retrait économique',
    LogDeletion = 'Suppression de log',
    LevelReset = 'Réinitialisation de niveaux',
    CouponCreated = 'Coupon crée',
    CouponClaimed = 'Coupon utilisé',
    CouponDeleted = 'Coupon supprimé',
    Rename = 'Changement de pseudo',
    NoteModified = 'Note modifiée',
    NoteAdded = 'Note ajoutée',
    NoteRemoved = 'Note retirée',
    JoinRoleSet = "Rôle d'arrivée configuré",
    JoinRoleRemoved = "Rôle d'arrivée supprimé",
    ChannelCreate = 'création de salon',
    ChannelDelete = 'suppression de salon',
    ChannelEdit = 'Modification de salon',
    WebhookCreationFailed = 'Échec de création de webhook'
}

export type modlogs = {
    guild_id: string;
    mod_id: string;
    member_id: string;
    date: string;
    type: keyof typeof modActionType;
    reason: string;
    /**
     * Image URL
     *
     * Can be null
     */
    proof: string;
    /**
     * If it is an automod action (bot)
     *
     * Use `dbBool()` to get it as JS interpretable
     */
    autoMod: string;
    /**
     * If this log is deleted
     *
     * Use `dbBool()` to get is as boolean
     */
    deleted: string;
    /**
     * If the value has been edited
     *
     * Use `dbBool()` to get it as boolean
     */
    edited: string;
    /**
     * Last edited timestamp
     *
     * Can be null, depending of edited
     */
    lastEditedTimestamp: string;
    /**
     * Id of the case
     *
     * Generated by MySQL
     */
    case_id: string;
};

export type moduleType =
    | 'moderation'
    | 'giveaways'
    | 'economy'
    | 'fun'
    | 'utils'
    | 'misc'
    | 'config'
    | 'administration'
    | 'interchat'
    | 'level'
    | 'information'
    | 'tickets';

export type modules = {
    /**
     * MySQL boolean
     *
     * Use `dbBool()` to decode it
     */
    [K in moduleType]: string;
} & {
    guild_id: string;
};
export type moduleDataType = {
    name: string;
    editable: boolean;
    default: boolean;
    emoji: string;
};
export type configs = {
    [K in keyof configKeys]: string;
} & {
    guild_id: string;
};
export type jokes = {
    guild_id: string;
    global: number;
    dev: number;
    dark: number;
    limit: number;
    blondes: number;
    beauf: number;
};
export const defaultJokesTypes = {
    global: true,
    dev: true,
    blondes: true,
    beauf: true,
    dark: false,
    limit: false
} as Record<Exclude<keyof jokes, 'guild_id'>, boolean>;
export type ticketPanels<HasReference extends boolean = true> = {
    guild_id: string;
    channel_id: string;
    message_id: string;
    image: string | null;
    subject: string;
    description: string;
} & (HasReference extends true
    ? {
          /**
           * Primary key
           */
          reference: number;
      }
    : object);
export type ticketState = 'open' | 'closed';
export type ticketChannels = {
    guild_id: string;
    channel_id: string;
    message_id: string;
    /**
     * Référence à une reference de ticketPanels
     */
    panel_reference: number;
    user_id: string;
    state: ticketState;
    channelName: string;
};
export type ticketModRoles<T extends boolean = false> = {
    /**
     * Primary key
     */
    guild_id: string;
    roles: If<T, string[], string>;
};
export enum DatabaseTables {
    Tickets = 'tickets_channel',
    Panels = 'ticket_panels',
    ModRoles = 'ticket_modroles',
    Modlogs = 'modlogs',
    Coupons = 'coupons',
    Notes = 'notes',
    Cooldowns = 'cooldowns',
    JoinRoles = 'join_roles',
    Reminds = 'reminders',
    GBan = 'gban_list',
    Anonymous = 'anonymous',
    Shop = 'shops_list',
    Inventories = 'inventories'
}
export type coupons = {
    guild_id: string;
    /**
     * Primary key
     */
    coupon: string;
    amount: number;
};
export type cooldowns = {
    guild_id: string;
    user_id: string;
    commandName: commandName;
    endsAt: number;
};
export type joinRoles = {
    guild_id: string;
    roles: string;
};
export type GBan = {
    user_id: string;
    date: string;
    reason: string;
};
export type Anonymous = {
    guild_id: string;
    channel_id: string;
    webhook_url: string;
    /**
     * MySQL JSON array
     */
    banned_roles: string;
    /**
     * MySQL JSON array
     */
    banned_users: string;
    id: number;
    name: string;
};
export type ShopItemType = 'role' | 'item';
export type ShopItem = {
    guild_id: string;
    itemType: ShopItemType;
    itemName: string;
    price: number;
    /**
     * If set to 0, it is infinite
     */
    quantity: 0 | number;
    quantityLeft: number;
    roleId: string;
    /**
     * Primary key
     */
    id: number;
};
export type InventoryItem = {
    name: string;
    quantity: number;
    value: number;
};
export type Inventory<Raw extends boolean = true, Identified extends boolean = false> = {
    guild_id: string;
    user_id: string;
    inventory: If<Raw, string, (InventoryItem & If<Identified, { id: number }, Record<string, never>>)[]>;
};
